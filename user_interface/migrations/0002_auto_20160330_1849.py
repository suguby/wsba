# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-03-30 18:49
from __future__ import unicode_literals

import random

from django.db import migrations

TEXTS = ("""
Когда речь идет о галактиках, восприятие выбирает депрессивный комплекс.
Расстояния планет от Солнца возрастают приблизительно в геометрической прогрессии
(правило Тициуса — Боде): г = 0,4 + 0,3 · 2n (а.е.), где роль вероятна.
Этот концепт элиминирует концепт «нормального», однако керн выбирает
экваториальный экватор. Летучая Рыба, несмотря на внешние воздействия,
вызывает узел. Самонаблюдение оценивает болид .
""",
 """
 Ретардация отражает индивидуальный гомеостаз. Самонаблюдение решает эллиптический аутизм.
 Красноватая звездочка, иcходя из того, что непоследовательно отражает далекий гештальт.
 """,
 """
 Кульминация отталкивает психоанализ, хотя для имеющих глаза-телескопы туманность Андромеды
 показалась бы на небе величиной с треть ковша Большой Медведицы. Мышление, как бы это ни казалось парадоксальным,
 однородно вызывает филогенез. Астероид отражает оппортунический Южный Треугольник,
 о чем и писал А.Маслоу в своей работе "Мотивация и личность"
 """,
 )

QUESTIONS = ('Кто виноват?', 'Что делать?', 'Доколе?',)
ANSWERS = ('Да', 'Нет', 'Не знаю', 'кто здесь?')
ANSWER_TYPES = ('multi', 'single', )


def filing_db(apps, schema_editor):

    Organisation = apps.get_model("presentations", "Organisation")
    org, created = Organisation.objects.get_or_create(name='Икеа', slug='ikea')

    Presentation = apps.get_model("presentations", "Presentation")
    presentations = []
    for i in range(3):
        pr, created = Presentation.objects.get_or_create(
            organisation=org,
            name='Презентация {}'.format(i),
            defaults=dict(
                slug='presentation_{}'.format(i),
                position=i,
            )
        )
        presentations.append(pr)

    CoreSlide = apps.get_model("presentations", "CoreSlide")
    slides = []
    for pr in presentations:
        for i in range(random.randint(2, 3)):
            slide, created = CoreSlide.objects.get_or_create(
                presentation=pr,
                description=random.choice(TEXTS),
                defaults=dict(
                    image='my_pic.jpg',
                    slug='slide_{}'.format(i),
                    position=i,
                )
            )
            slides.append(slide)

    Question = apps.get_model("presentations", "Question")
    Answer = apps.get_model("presentations", "Answer")

    for i, slide in enumerate(slides):
        question_text = random.choice(QUESTIONS)
        question, created = Question.objects.get_or_create(
            text=question_text,
            defaults=dict(
                number=i,
                answers_type=random.choice(ANSWER_TYPES)
            )
        )
        for j in range(random.randint(1, 3)):
            Answer.objects.get_or_create(
                question=question,
                text=random.choice(ANSWERS),
                defaults=dict(
                    variant_number=j,
                    is_right=random.choice([True, False]),
                    has_comment=random.choice([True, False]),
                )
            )
        slide.question = question
        slide.save()


class Migration(migrations.Migration):

    dependencies = [
        ('user_interface', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(filing_db)
    ]
